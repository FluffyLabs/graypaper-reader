import fs from "node:fs";
import path from "node:path";

/**
 * Convert messages.json file generated by the tool into Reader notes format
 * so it can be imported or loaded as remote content.
 */

type Message = {
  /** ISO date. */
  date: string;
  /** Matrix handle */
  sender: string;
  /** Link to matrix message. */
  link: string;
  /** Content of the message. */
  msg: string;
};

type NoteV3 = {
  content: string;
  /** local-tz timestamp (from Date.now()) */
  date: number;
  /** empty for local notes. */
  author: string;
  /** duplicated in selectionStart/selectionEnd? */
  pageNumber: number;
  /** Full version number. */
  version: string;
  /** Labels. */
  labels: string[];

  /** selection */
  selectionString: string;
  selectionStart: SyntexBlockId;
  selectionEnd: SyntexBlockId;
};

type SyntexBlockId = {
  pageNumber: number;
  index: number;
};

function main(file = "./messages.json") {
  const content = fs.readFileSync(path.resolve(file), "utf-8");
  // note that the file is not a valid JSON as-is (it's appended to),
  // so let's convert it to an array.
  const json = `[${content.substring(0, content.lastIndexOf("},"))}]`;
  const data = JSON.parse(json) as Message[];

  const notes: NoteV3[] = [];
  for (const msg of data) {
    const linkData = findAndParseLink(msg.msg);
    notes.push({
      content: msg.msg,
      date: new Date(msg.date).getTime(),
      author: msg.sender,
      ...linkData,
      labels: [],
    });
  }
}

function findAndParseLink(content: string) {
  return {
    version: "x",
    pageNumber: 0,
    selectionString: "",
    selectionStart: {
      pageNumber: 0,
      index: 0,
    },
    selectionEnd: {
      pageNumber: 0,
      index: 0,
    },
  };
}

main(process.argv[0]);
